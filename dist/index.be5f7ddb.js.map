{"mappings":"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","sources":["src/jeffy.js"],"sourcesContent":["const body = document.querySelector(\"body\");\nlet tables = document.querySelectorAll(\".draggable-table\");\nlet tablePositions = [];\nlet isDraggingBackground = false;\nlet isDraggingTable = null;\nlet startX, startY;\nlet bgPosX = 0,\n  bgPosY = 0;\nlet inputGraph;\nlet operations = [];\nlet xPosRandIncrement = 400;\nlet yPosRandIncrement = 400;\n//press, xPos and yPos of bg at start\nbody.addEventListener(\"mousedown\", (e) => {\n  if (!e.target.classList.contains(\"draggable-table\")) {\n    isDraggingBackground = true;\n    startX = e.clientX;\n    startY = e.clientY;\n  }\n});\n//mouse movement\ndocument.addEventListener(\"mousemove\", (e) => {\n  if (isDraggingBackground) {\n    const deltaX = e.clientX - startX;\n    const deltaY = e.clientY - startY;\n\n    bgPosX += deltaX;\n    bgPosY += deltaY;\n    body.style.backgroundPosition = `${bgPosX}px ${bgPosY}px`;\n\n    tablePositions.forEach(({ element, relativeLeft, relativeTop }) => {\n      element.style.left = `${relativeLeft + bgPosX}px`;\n      element.style.top = `${relativeTop + bgPosY}px`;\n    });\n\n    startX = e.clientX;\n    startY = e.clientY;\n  }\n  if (isDraggingTable) {\n    const newLeft = e.clientX - startX;\n    const newTop = e.clientY - startY;\n    isDraggingTable.style.left = `${newLeft}px`;\n    isDraggingTable.style.top = `${newTop}px`;\n  }\n});\n//release\ndocument.addEventListener(\"mouseup\", () => {\n  isDraggingBackground = false;\n  if (isDraggingTable) {\n    isDraggingTable = null;\n  }\n});\n//Obtain object from last inputted json inputted json\ndocument\n  .getElementById(\"inputFile\")\n  .addEventListener(\"change\", function (event) {\n    const file = event.target.files[event.target.files.length - 1];\n    if (file) {\n      const reader = new FileReader();\n      reader.onload = function (e) {\n        const fileContent = e.target.result;\n        try {\n          inputGraph = JSON.parse(fileContent);\n          createDivs();\n        } catch (error) {\n          console.error(\"Error parsing JSON:\", error);\n        }\n      };\n      reader.readAsText(file); //reads file and adds to assigns to inputGraph\n    } else {\n      console.log(\"No file was selected.\");\n    }\n  });\n//sending operations from obj into div\nlet createDivs = () => {\n  let operations = Array.from(inputGraph.operations);\n  operations.forEach((o) => {\n    const mainOperation = document.createElement(\"div\");\n    const name = document.createElement(\"div\");\n    const inputOutputContainer = document.createElement(\"div\"); // Fixed from createAttribute\n    const inputs = document.createElement(\"div\");\n    const outputs = document.createElement(\"div\");\n    let numInputs = o.inputs.length;\n    let numOutputs = o.outputs.length;\n    // Assign temporary x and y values for random graph visuals\n    if (!o?.position?.x && !o?.position?.y) {\n      o.position = {};\n      o.position.x = xPosRandIncrement;\n      o.position.y = yPosRandIncrement;\n      xPosRandIncrement += 300;\n      if (xPosRandIncrement > 1600) {\n        xPosRandIncrement = 400;\n        yPosRandIncrement += 300;\n      }\n    }\n    tablePositions.push({\n      element: mainOperation,\n      relativeLeft: parseInt(o.position.x),\n      relativeTop: parseInt(o.position.y),\n    });\n\n    // Creates the required input elements\n    for (let i = 0; i < numInputs; i++) {\n      // Fixed loop condition\n      const input = document.createElement(\"label\");\n      const temp = document.createElement(\"input\");\n      temp.setAttribute(\"type\", \"checkbox\"); // Fixed attribute setting\n      input.append(temp);\n      inputs.append(input);\n    }\n    for (let i = 0; i < numOutputs; i++) {\n      // Fixed loop condition\n      const output = document.createElement(\"label\");\n      const temp = document.createElement(\"input\");\n      temp.setAttribute(\"type\", \"checkbox\"); // Fixed attribute setting\n      output.append(temp);\n      outputs.append(output);\n    }\n\n    mainOperation.classList.add(\"draggable-table\");\n    name.classList.add(\"name\");\n    name.textContent = o.name;\n    inputOutputContainer.classList.add(\"inputOutputContainer\");\n    inputs.classList.add(\"inputs\");\n    outputs.classList.add(\"outputs\");\n\n    //initial x and y positions before mouse click\n    mainOperation.style.left = `${o.position.x}px`;\n    mainOperation.style.top = `${o.position.y}px`;\n\n    inputOutputContainer.append(inputs);\n    inputOutputContainer.append(outputs);\n\n    mainOperation.append(name);\n    mainOperation.append(inputOutputContainer);\n\n    body.append(mainOperation);\n  });\n  initializeOperations();\n};\n//adds events to new operations\nlet initializeOperations = () => {\n  tables = document.querySelectorAll(\".draggable-table\");\n  tables.forEach((table, index) => {\n    table.addEventListener(\"mousedown\", (e) => {\n      isDraggingTable = table;\n      startX = e.clientX - parseInt(window.getComputedStyle(table).left);\n      startY = e.clientY - parseInt(window.getComputedStyle(table).top);\n\n      e.stopPropagation(); //idk, doesn't work without this\n    });\n    //tables into objects and assigns starting relativeX and relativeY\n    table.addEventListener(\"mouseup\", () => {\n      if (isDraggingTable) {\n        const currentLeft = parseInt(window.getComputedStyle(table).left);\n        const currentTop = parseInt(window.getComputedStyle(table).top);\n\n        tablePositions[index].relativeLeft = currentLeft - bgPosX;\n        tablePositions[index].relativeTop = currentTop - bgPosY;\n\n        isDraggingTable = null;\n      }\n    });\n  });\n};\nlet resetFunction = () => {\n  document.querySelectorAll(\".draggable-table\").forEach((e) => e.remove());\n  bgPosX = 0;\n  bgPosY = 0;\n  startX = 0;\n  startY = 0;\n  xPosRandIncrement = 400;\n  yPosRandIncrement = 400;\n};"],"names":[],"version":3,"file":"index.be5f7ddb.js.map","sourceRoot":"/__parcel_source_root/"}